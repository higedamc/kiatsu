def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException('Flutter SDK not found. Define location with flutter.sdk in the local.properties file.')
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// //dart-defineの設定
// //参考URL: https://zenn.dev/riscait/articles/separating-environments-in-flutter
// def dartEnvironmentVariables = [:];
// if (project.hasProperty('dart-defines')) {
//     // カンマ区切りかつBase64でエンコードされている dart-defines をデコードして変数に格納
//     dartEnvironmentVariables = dartEnvironmentVariables + project.property('dart-defines')
//         .split(',')
//         .collectEntries { entry ->
//             def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
//             [(pair.first()): pair.last()]
//         }
// }

// task copySources(type: Copy) {
//    from "src/${dartEnvironmentVariables.FLAVOR}/res"
//    into 'src/main/res'
// }

// tasks.whenTaskAdded { task ->
//    task.dependsOn copySources
// }

// task selectGoogleServicesJson(type: Copy) {
//     from "src/${dartEnvironmentVariables.FLAVOR}/google-services.json"
//     into './'
// }

// tasks.whenTaskAdded { task ->
//     if (task.name == 'processDebugGoogleServices' || task.name == 'processReleaseGoogleServices') {
//         task.dependsOn selectGoogleServicesJson
//     }
// }

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
   compileSdkVersion 33

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId 'com.kiatsu.app'
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        //  if (dartEnvironmentVariables.FLAVOR != 'prod') {
        //     applicationIdSuffix ".${dartEnvironmentVariables.FLAVOR}"
        // }
        // resValue "string", "app_name", "kiatsu" +
        // (dartEnvironmentVariables.FLAVOR == 'prod' ? '' : ".${dartEnvironmentVariables.FLAVOR}")
    }

    signingConfigs {

        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }


    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            // apply from: './signing/signing.gradle', to: android
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
