default_platform(:ios)

# https://chimon.hashnode.dev/flutter-fastlane-and-firebase-app-distribution
# Default temporary keychain password and name, if not included from environment
TEMP_KEYCHAIN_NAME_DEFAULT = "fastlane_flutter" || ENV["TEMP_KEYCHAIN_NAME"]
TEMP_KEYCHAN_PASSWORD_DEFAULT = "temppassword" || ENV["TEMP_KEYCHAIN_PASSWORD"]
APP_ID = ENV["FIREBASE_IOS_APPID"]
FIREBASE_TOKEN = ENV["FIREBASE_CI_TOKEN"]

# Remove the temporary keychain, if it exists
def delete_temp_keychain(name)
  delete_keychain(
    name: name,
  ) if File.exist? File.expand_path("~/Library/Keychains/#{name}-db")
end

# Create the temporary keychain with name and password
def create_temp_keychain(name, password)
  create_keychain(
    name: name,
    password: password,
    unlock: false,
    timeout: 0,
  )
end

# Ensure we have a fresh, empty temporary keychain
def ensure_temp_keychain(name, password)
  delete_temp_keychain(name)
  create_temp_keychain(name, password)
end

platform :ios do
  desc "Build & sign iOS app"
  lane :build_ios do |options|
    update_code_signing_settings(
      path: "./Runner.xcodeproj",
      team_id: CredentialsManager::AppfileConfig.try_fetch_value(:team_id),
      profile_name: "match AdHoc com.kiatsu.app-stg",
      code_sign_identity: "Apple Distribution: Kohei Otani (2U4XKJYC6R)",
      # code_sign_identity: "Apple Development: Kohei Otani (AW8S6KQ8CU)",
    )
    keychain_name = TEMP_KEYCHAIN_NAME_DEFAULT
    keychain_password = TEMP_KEYCHAN_PASSWORD_DEFAULT
    ensure_temp_keychain(keychain_name, keychain_password)
    match(
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier),
      type: "adhoc",
      readonly: is_ci,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      git_url: "https://github.com/higedamc/ios-certificates.git",
    )
    build_ios_app(
      scheme: "Runner",
      archive_path: "./build/Runner.xcarchive",
      export_method: "ad-hoc",
      export_options: {
        provisioningProfiles: {
          "com.kiatsu.app-stg" => "match AdHoc com.kiatsu.app-stg",

        },
      },
      output_directory: "./build/Runner",
    )
    delete_temp_keychain(keychain_name)
  end

  desc "Deploy a new beta"
  lane :distribute_beta do |options|
    # Upload to test flight or AppStore depending on caller parameters
    firebase_app_distribution(
      app: APP_ID,
      groups: "me",
      firebase_cli_path: "/usr/local/bin/firebase",
      firebase_cli_token: FIREBASE_TOKEN,
      ipa_path: "./build/Runner/Runner.ipa",
      release_notes_file: "/Users/jackstash/Pictures/work/kiatsu/release_notes.txt",
    )
  end
  desc "Deploy a new beta to TestFlight"
  lane :test_do do |options|
    # Upload to test flight or AppStore depending on caller parameters
    upload_to_testflight(
      username: "kohei.otani@tutanota.com",
      ipa: "./build/Runner/Runner.ipa",
      app_identifier: CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    )
  end
end
